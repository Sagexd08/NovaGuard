// Simple test for vulnerability scanner endpoint
const http = require('http');

const testVulnerabilityEndpoint = () => {
  console.log('🧪 Testing vulnerability scanner endpoint...');

  const postData = JSON.stringify({
    contractCode: `
      pragma solidity ^0.8.0;
      contract Test {
          uint256 public value;
          function setValue(uint256 _value) public {
              value = _value;
          }
      }
    `,
    chain: 'ethereum',
    options: {
      includeGasOptimization: true,
      scanType: 'comprehensive'
    }
  });

  const options = {
    hostname: 'localhost',
    port: 3002,
    path: '/api/v1/vulnerability/scan',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer test-token',
      'Content-Length': Buffer.byteLength(postData)
    },
    timeout: 10000 // 10 second timeout
  };

  const req = http.request(options, (res) => {
    console.log(`📊 Response status: ${res.statusCode}`);
    console.log(`📋 Response headers:`, res.headers);

    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });

    res.on('end', () => {
      try {
        const result = JSON.parse(data);
        console.log('✅ Vulnerability scan result:');
        console.log(JSON.stringify(result, null, 2));

        if (result.success) {
          console.log('🎉 Vulnerability scan completed successfully!');
          console.log('🔍 Vulnerabilities found:', result.data?.vulnerabilities?.length || 0);
          console.log('📊 Security score:', result.data?.securityScore || 'N/A');
        } else {
          console.log('❌ Vulnerability scan failed:', result.error);
        }
      } catch (error) {
        console.error('❌ Failed to parse response:', error);
        console.log('Raw response:', data);
      }
    });
  });

  req.on('error', (error) => {
    console.error('❌ Request failed:', error);
  });

  req.on('timeout', () => {
    console.error('❌ Request timed out');
    req.destroy();
  });

  req.write(postData);
  req.end();
};

testVulnerabilityEndpoint();
