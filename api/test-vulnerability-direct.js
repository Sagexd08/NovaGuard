// Test vulnerability scan logic directly without API
require('dotenv').config();
console.log('🔧 Environment loaded - Development mode:', process.env.DEVELOPMENT_MODE);
console.log('🔧 Node env:', process.env.NODE_ENV);

// Mock the vulnerability scan function by extracting the logic
const testVulnerabilityLogic = async () => {
  console.log('🧪 Testing vulnerability scan logic directly...');

  const contractCode = `
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.8.19;

    contract TestContract {
        mapping(address => uint256) public balances;
        address public owner;

        constructor() {
            owner = msg.sender;
        }

        function deposit() public payable {
            balances[msg.sender] += msg.value;
        }

        function withdraw(uint256 amount) public {
            require(balances[msg.sender] >= amount, "Insufficient balance");
            balances[msg.sender] -= amount;
            payable(msg.sender).transfer(amount);
        }

        function emergencyWithdraw() public {
            require(msg.sender == owner, "Only owner");
            payable(owner).transfer(address(this).balance);
        }
    }
  `;

  try {
    // Test the vulnerability scan logic directly
    console.log('📡 Testing with contract code...');
    
    // Import the scan functions directly
    const vulnerabilityScan = require('./v1/vulnerability/scan');
    
    // Create a mock request object
    const mockReq = {
      method: 'POST',
      body: {
        contractCode: contractCode,
        chain: 'ethereum',
        options: {
          includeGasOptimization: true,
          scanType: 'comprehensive'
        }
      },
      auth: {
        userId: 'test-user',
        email: 'test@example.com'
      }
    };

    // Create a mock response object
    const mockRes = {
      status: (code) => ({
        json: (data) => {
          console.log('📊 Response status:', code);
          console.log('✅ Vulnerability scan result:');
          console.log(JSON.stringify(data, null, 2));
          
          if (data.success) {
            console.log('🎉 Vulnerability scan completed successfully!');
            console.log('🔍 Vulnerabilities found:', data.data?.vulnerabilities?.length || 0);
            console.log('📊 Security score:', data.data?.securityScore || 'N/A');
          } else {
            console.log('❌ Vulnerability scan failed:', data.error);
          }
        }
      })
    };

    // Call the handler directly
    await vulnerabilityScan(mockReq, mockRes);

  } catch (error) {
    console.error('❌ Direct test failed:', error.message);
  }
};

testVulnerabilityLogic();
