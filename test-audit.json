{
  "contractCode": "pragma solidity ^0.8.0;\n\ncontract TestContract {\n    address public owner;\n    mapping(address => uint256) public balances;\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n    \n    function withdraw(uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        payable(msg.sender).transfer(amount);\n    }\n    \n    function emergencyWithdraw() public {\n        require(msg.sender == owner, \"Only owner\");\n        payable(owner).transfer(address(this).balance);\n    }\n}",
  "options": {
    "includeGasOptimization": true,
    "includeCodeQuality": true
  }
}
