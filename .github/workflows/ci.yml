# =============================================
# NOVAGUARD CI/CD PIPELINE
# Continuous Integration and Deployment
# =============================================

name: NovaGuard CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # =============================================
  # CODE QUALITY & TESTING
  # =============================================
  
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Run Prettier check
        run: pnpm format:check

      - name: Type check
        run: pnpm type-check

      - name: Run unit tests
        run: pnpm test:unit
        env:
          CI: true

      - name: Run integration tests
        run: pnpm test:integration
        env:
          CI: true
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # =============================================
  # SECURITY SCANNING
  # =============================================
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # =============================================
  # BUILD & DEPLOYMENT
  # =============================================
  
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        environment: [staging, production]
        
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.WALLETCONNECT_PROJECT_ID }}
          NEXT_PUBLIC_ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}

      - name: Run build tests
        run: pnpm test:build

      - name: Setup Firebase CLI
        uses: w9jds/setup-firebase@main
        with:
          tools: hosting,functions
          firebase_token: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy to Firebase Hosting
        id: deploy
        run: |
          if [ "${{ matrix.environment }}" == "production" ]; then
            firebase deploy --only hosting:production --token ${{ secrets.FIREBASE_TOKEN }}
            echo "url=https://novaguard.app" >> $GITHUB_OUTPUT
          else
            firebase deploy --only hosting:staging --token ${{ secrets.FIREBASE_TOKEN }}
            echo "url=https://staging.novaguard.app" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Firebase Functions
        run: |
          cd functions
          npm install
          cd ..
          if [ "${{ matrix.environment }}" == "production" ]; then
            firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }}
          else
            firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }} --project staging
          fi

      - name: Run Supabase migrations
        run: |
          npx supabase db push --db-url ${{ secrets.SUPABASE_DB_URL }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()

  # =============================================
  # PERFORMANCE TESTING
  # =============================================
  
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run load tests
        run: |
          npx artillery run tests/load/api-load-test.yml
          npx artillery run tests/load/frontend-load-test.yml

  # =============================================
  # DATABASE BACKUP
  # =============================================
  
  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        run: |
          curl -fsSL https://supabase.com/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Create database backup
        run: |
          supabase db dump --db-url ${{ secrets.SUPABASE_DB_URL }} > backup-$(date +%Y%m%d-%H%M%S).sql
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Upload backup to S3
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Sync backup to S3
        run: |
          aws s3 cp backup-*.sql s3://novaguard-backups/database/
          aws s3 cp backup-*.sql s3://novaguard-backups/database/latest.sql

  # =============================================
  # MONITORING SETUP
  # =============================================
  
  setup-monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Setup Datadog monitoring
        uses: DataDog/synthetics-ci-github-action@v1.3.0
        with:
          api_key: ${{ secrets.DATADOG_API_KEY }}
          app_key: ${{ secrets.DATADOG_APP_KEY }}
          test_search_query: 'tag:novaguard'

      - name: Setup Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: novaguard
          SENTRY_PROJECT: novaguard-frontend
        with:
          environment: production
          sourcemaps: './out'

  # =============================================
  # CLEANUP
  # =============================================
  
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [performance-test, backup-database, setup-monitoring]
    if: always()
    
    steps:
      - name: Clean up old deployments
        run: |
          # Clean up old Firebase hosting versions (keep last 10)
          firebase hosting:versions:list --limit 20 | tail -n +11 | while read version; do
            firebase hosting:versions:delete $version --force
          done
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Clean up old Docker images
        run: |
          docker system prune -af --volumes
          docker image prune -af

      - name: Update deployment status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id,
              state: 'success',
              environment_url: 'https://novaguard.app',
              description: 'Deployment completed successfully'
            });

# =============================================
# WORKFLOW NOTIFICATIONS
# =============================================

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [cleanup]
    if: always()
    
    steps:
      - name: Send Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🚀 **NovaGuard Deployment Complete**
            
            **Status:** ${{ job.status }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            **Environment:** Production
            **URL:** https://novaguard.app
            
            **Build Time:** ${{ github.event.head_commit.timestamp }}

      - name: Update GitHub status
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;
            
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              context: 'NovaGuard CI/CD',
              description: 'Deployment pipeline completed',
              target_url: 'https://novaguard.app'
            });

# =============================================
# SCHEDULED JOBS
# =============================================

  scheduled-health-check:
    name: Scheduled Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Health check endpoints
        run: |
          curl -f https://novaguard.app/api/health || exit 1
          curl -f https://novaguard.app/api/status || exit 1

      - name: Check database connectivity
        run: |
          npx supabase db ping --db-url ${{ secrets.SUPABASE_DB_URL }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Notify if health check fails
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
